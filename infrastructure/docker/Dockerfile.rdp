# RDP-specific Dockerfile for VM Automation
# Includes all dependencies needed for RDP connections: FreeRDP, Xvfb, xdotool, ImageMagick

# ---------- Base image (RDP-specific) ----------
FROM python:3.12-slim AS base
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    PYTHONOPTIMIZE=2

# Update package lists first
RUN apt-get update -qq

# Install system deps for computer vision and RDP in separate steps
RUN apt-get install -y --no-install-recommends \
    ca-certificates \
    libglib2.0-0 \
    libsm6 \
    libxext6 \
    libxrender-dev \
    libgomp1 \
    libgl1-mesa-glx \
    libgthread-2.0-0

# Install X11 and display tools
RUN apt-get install -y --no-install-recommends \
    xvfb \
    x11-apps \
    x11-utils \
    xdotool

# Install RDP and screenshot tools
RUN apt-get install -y --no-install-recommends \
    freerdp2-x11 \
    scrot \
    imagemagick

# Install network tools (try different package name if needed)
RUN apt-get install -y --no-install-recommends \
    netbase || apt-get install -y --no-install-recommends inetutils-ping

# Install image processing tools
RUN apt-get install -y --no-install-recommends \
    netpbm

# Clean up
RUN rm -rf /var/lib/apt/lists/*

# Configure ImageMagick security policy for screenshot conversion
RUN sed -i 's/rights="none" pattern="PDF"/rights="read|write" pattern="PDF"/g' /etc/ImageMagick-6/policy.xml || true && \
    sed -i 's/rights="none" pattern="XWD"/rights="read|write" pattern="XWD"/g' /etc/ImageMagick-6/policy.xml || true

# ---------- Builder: uv + lock + install (no dev) ----------
FROM base AS builder
# Bring in uv binary
COPY --from=ghcr.io/astral-sh/uv:0.8.13 /uv /usr/local/bin/uv
WORKDIR /app

# Copy project metadata first for layer caching
COPY pyproject.toml /app/

# Create or refresh lock deterministically for Python 3.12
RUN --mount=type=cache,target=/root/.cache/uv \
    uv lock

# Install ONLY runtime deps into a local venv (no project yet, and no dev deps)
RUN --mount=type=cache,target=/root/.cache/uv \
    uv sync --frozen --no-install-project --no-dev

# Now copy the source and install the project into the same venv
COPY . /app
RUN --mount=type=cache,target=/root/.cache/uv \
    uv sync --frozen --no-dev

# ---------- Final runtime image ----------
FROM base AS runtime
WORKDIR /app

# Create a non-root user
RUN useradd -m -u 10001 appuser

# Copy the entire app (including .venv from builder)
COPY --from=builder /app /app

# Put venv on PATH
ENV PATH="/app/.venv/bin:${PATH}"

# Set default connection type to RDP
ENV CONNECTION_TYPE=rdp
ENV DISPLAY=:99

# Create temp directory for RDP screenshots (with proper permissions)
RUN mkdir -p /tmp/rdp_capture && chown appuser:appuser /tmp/rdp_capture

USER appuser
EXPOSE 8000

# Health check to verify RDP dependencies
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD which xfreerdp > /dev/null 2>&1 || exit 1

# Default command: run the VM automation CLI with RDP
CMD ["uv", "run", "vm-automation", "--connection", "rdp"]
